//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Commons;

namespace HRIS424.src.Database
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.SqlClient;
    using System.Data.Entity.Core.Metadata.Edm;
    using System.Data.Entity.Core.Mapping;
    using System.Linq;
    using CrystalGroup.Web.Utility;
    using Dapper;
    using Service;
    
    public partial class DB : DbContext
    {
        // 从SQlHelper获取数据库连接字符串
        public static string CONN_STR = SQlHelper._DBConnectionString
            .Replace("Server", "data source")
            .Replace("DataBase", "initial catalog")
            .Replace("UID", "user id")
            .Replace("PWD", "password");
    
        public DB()
            : base("metadata="
                    + string.Format("res://{0}/{1}.csdl|res://{0}/{1}.ssdl|res://{0}/{1}.msl;"
    					,System.Reflection.Assembly.GetExecutingAssembly().FullName
    					,"src.Database.DB")
                    + "provider=System.Data.SqlClient;provider connection string='" + CONN_STR
                    + "persist security info=True;multipleactiveresultsets=True;App=EntityFramework'")
        {
    	}
    
        public DB(string connectionString)
            : base(connectionString)
        {
        }
    
        /// <summary>
        /// 保存数据到数据库并写日志记录，请注意，仅在数据发生了变化才会写记录
        /// </summary>
        /// <returns></returns>
    	public int SaveChangesAndWriteLog()
        {
            var ds = new System.Data.DataSet();
            var batchId = Guid.NewGuid().ToString();
            List<string> logTables = new List<string>();
            var changeTrack = this.ChangeTracker.Entries().Where(p => 
                    p.State == EntityState.Added 
                || p.State == EntityState.Deleted 
                || p.State == EntityState.Modified);
            foreach (var entry in changeTrack)
            {
                var tableName = this.GetTableName(entry.Entity.GetType());                
                this.RecordHistory(entry, tableName, batchId, ds, logTables);
                if (!logTables.Contains(tableName)) logTables.Add(tableName);
            }
            try
            {
    			using (var bulk = new System.Data.SqlClient.SqlBulkCopy(this.Database.Connection.ConnectionString))
                {
                    foreach (System.Data.DataTable dt in ds.Tables)
                    {
                        bulk.DestinationTableName = dt.TableName;
                        bulk.WriteToServer(dt);
                    }
                }
    
                return base.SaveChanges();
            }
            catch
            {
                this.DeleteHistory(logTables, batchId);
                throw;
            }    
        } 
    
        public string GetTableName(Type type)
        {
            var metadata = ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace;
    
            // Get the part of the model that contains info about the actual CLR types
            var objectItemCollection = ((ObjectItemCollection)metadata.GetItemCollection(DataSpace.OSpace));
    
            // Get the entity type from the model that maps to the CLR type
            var entityType = metadata
                    .GetItems<EntityType>(DataSpace.OSpace)
                    .Single(e => objectItemCollection.GetClrType(e) == type);
    
            // Get the entity set that uses this entity type
            var entitySet = metadata
                .GetItems<EntityContainer>(DataSpace.CSpace)
                .Single()
                .EntitySets
                .Single(s => s.ElementType.Name == entityType.Name);
    
            // Find the mapping between conceptual and storage model for this entity set
            var mapping = metadata.GetItems<EntityContainerMapping>(DataSpace.CSSpace)
                    .Single()
                    .EntitySetMappings
                    .Single(s => s.EntitySet == entitySet);
    
            // Find the storage entity set (table) that the entity is mapped
            var table = mapping
                .EntityTypeMappings.Single()
                .Fragments.Single()
                .StoreEntitySet;
    
            // Return the table name from the storage entity set
            return (string)table.MetadataProperties["Table"].Value ?? table.Name;
        }
    
        void DeleteHistory(List<string> logTables, string batchId)
        {
            string sql = string.Empty;
            foreach (var tableName in logTables)
            {
                sql += "DELETE [" + tableName + "_Log] WHERE LOG_ID=@LOG_ID;";
            }
        
            this.Database.Connection.Execute(sql, new { LOG_ID = batchId });
        }
        
    	void CreateLogTableIfNotExists(DbEntityEntry entry, string tableName, List<string> logTables)
        {
            if (logTables.Contains(tableName)) return;
                
            List<string> nullString = new List<string>();
            if (entry.State == EntityState.Deleted)
            {
                Enumerable.Range(1, entry.OriginalValues.PropertyNames.Count() + 4).ToList().ForEach(t => { nullString.Add("NULL"); });
            }
            else
            {
                Enumerable.Range(1, entry.CurrentValues.PropertyNames.Count() + 4).ToList().ForEach(t => { nullString.Add("NULL"); });
            }        
            var unionSql = "SELECT " + string.Join(",", nullString);
    
            var createLogSql = string.Format(@"
                    IF OBJECT_ID('{0}_Log') IS NULL
                    BEGIN
                        SELECT *, CAST('' AS NVARCHAR(50)) AS ACTION_ID, CAST('' AS VARCHAR(50)) AS ACTION_TYPE, GETDATE() AS ACTION_DATE, CAST('' AS VARCHAR(50)) AS LOG_ID
                        INTO [{0}_Log]
                        FROM {0}
                        WHERE 1=2
                        UNION
                        {1}
    					WHERE 1=2
                    END", tableName, unionSql);
            this.Database.Connection.Execute(createLogSql);
        }
    
        void RecordHistory(DbEntityEntry entry, string tableName, string batchId, System.Data.DataSet ds, List<string> logTables)
        {
            if (entry.Entity != null)
            {
                CreateLogTableIfNotExists(entry, tableName, logTables);
                var state = entry.State.ToString();
                var logTableName = tableName + "_Log";
                System.Data.DataTable dt = null;
                if (ds != null && !ds.Tables.Contains(logTableName))
                {
                    dt = Commons.SQlHelper.ExecuteToDataTable(string.Format("SELECT * FROM {0} WHERE 1=2", logTableName), System.Data.CommandType.Text, null);
                    dt.TableName = logTableName;
                    ds.Tables.Add(dt);
                }
    
                dt = ds.Tables[logTableName];
    
                var row = dt.NewRow();
                if(entry.State == EntityState.Deleted)
                {
                    foreach (string prop in entry.OriginalValues.PropertyNames)
                    {
                        if (entry.OriginalValues[prop] == null) continue;                        
                        row[prop] = entry.OriginalValues[prop];
                    }
                }
                else
                {
                    foreach (string prop in entry.CurrentValues.PropertyNames)
                    {
                        if (entry.CurrentValues[prop] == null) continue;
                        row[prop] = entry.CurrentValues[prop];
                    }
                }
    
                row["ACTION_ID"] = SccService.CurrentUserId;
                row["ACTION_TYPE"] = state;
                row["LOG_ID"] = batchId;
                row["ACTION_DATE"] = DateTime.Now;
                dt.Rows.Add(row);
            }
        }	
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<App_Temp_Data> App_Temp_Data { get; set; }
        public DbSet<Cost_Per> Cost_Per { get; set; }
    }
}
